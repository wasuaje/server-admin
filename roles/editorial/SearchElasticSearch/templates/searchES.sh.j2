SCRIPT="$0"
APP_NAME="SearchElasticSearch"
RESIN_HOME={{resin_home}}
export JAVA_HOME={{java_home_6}}


# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

# determine SearchElasticsearch home
SES_HOME=`dirname "$SCRIPT"`/..

# make SEARCH_ELASTICSEARCH_HOME absolute
SES_HOME=`cd "$SES_HOME"; pwd`

#echo $SES_HOME

# Resolve the location of the 'ps' command
PS_EXE="/usr/ucb/ps"
    if [ ! -x "$PS_EXE" ]
    then
        PS_EXE="/usr/bin/ps"
        if [ ! -x "$PS_EXE" ]
        then
            PS_EXE="/bin/ps"
            if [ ! -x "$PS_EXE" ]
            then
                echo "Unable to locate ps"
                echo "Please report this message along with the location of the command on your system"
                exit 1
            fi
        fi
    fi


if [ -x "$RESIN_HOME/bin/httpd.sh" ]
then
    RESIN=$RESIN_HOME/bin/httpd.sh
else
    echo "variable RESIN_HOME no definida o no existe el archivo: bin/httpd.sh dentro de la variable RESIN_HOME..."
    exit 1
fi

#if [ -x "$SES_HOME/conf/resin.conf" ]
#then
    RESIN_CONF=$SES_HOME/conf/resin.conf
#else
#    echo "Se esperaba el archivo resin.conf en la ruta: $SES_HOME/conf/resin.conf"
#    exit 1
#fi

PID_FILE=$SES_HOME/conf/pid.txt

getPID(){
    PID=""
    if [ -f "$PID_FILE" ]
    then
        if [ -r "$PID_FILE" ]
        then
            PID=`cat "$PID_FILE"`
#Con la siguiente linea consultamos el proceso
            PID=`ps -e |grep "$PID"`
        else
            echo "Cannot read $PID_FILE."
            exit 1
        fi
    fi
}

start(){
    getPID

    if [ "X$PID" = "X" ]
    then
        $RESIN -conf $RESIN_CONF -pid $PID_FILE -Dinstance=$APP_NAME -J-Xmx1024m -J-Xms1024m -J-Xss256k -J-XX:+UseParNewGC -J-XX:+UseConcMarkSweepGC -J-XX:CMSInitiatingOccupancyFraction=75 -J-XX:+UseCMSInitiatingOccupancyOnly -J-XX:+HeapDumpOnOutOfMemoryError -J-server -start
    else
        echo "La aplicacion $APP_NAME esta ejecutandose con PID:$PID"   
        if [ "X$1" = "X1" ]
        then
            exit 1
        fi
    fi
}

stop(){
    getPID

    if [ "X$PID" = "X" ]
    then
        echo "La aplicacion $APP_NAME NO esta ejecutandose."
        if [ "X$1" = "X1" ]
        then
            exit 1
        fi
    else
        $RESIN  -pid $PID_FILE -J-server -stop
    fi
}

status(){
    getPID

    if [ "X$PID" = "X" ]
    then
        echo "La aplicacion $APP_NAME NO esta ejecutandose."       
    else
        echo "La aplicacion $APP_NAME esta ejecutandose con PID:$PID"
    fi
    if [ "X$1" = "X1" ]
    then
        exit 1
    fi
}

commandUse(){
    echo "Comandos a usar"
    echo "---------------------------------------"
    echo "start: Inicia la aplicacion"
    echo "stop: Detiene la aplicacion"
    echo "status: Da un estatus de la aplicacion"
    echo "restart: Reinica la aplicacion"
}

case "$1" in
    'start')
        echo "$APP_NAME Iniciando..."
        start "1"
    ;;
    'stop')
        echo "$APP_NAME Deteniendo..."
        stop "1"
    ;;
    'restart')
        echo "$APP_NAME Deteniendo..."
        stop "0"
        echo "$APP_NAME Iniciando..."
        start "1"
    ;;
    'status')
        status "0"
    ;;
    *)
        commandUse
    ;;
esac

exit 0
