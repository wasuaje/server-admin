# Run as a less privileged user for security reasons.
user nobody nobody; #CentOS has user nobody group nobody, Debian/Ubuntu has user nobody group nogroup

# How many worker threads to run; "auto" sets it to the number
# of CPU cores available in the system, and offers the best
# performance. Don't set it higher than the number of CPU cores
# if changing this parameter.
#
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
#
# Si se usa la opcion auto aqui, worker_cpu_affinity debe especificarse para el total de procesadores
worker_processes auto; 

# Each worker uses a differente processor, reducing CPU context switches
#
# El numero de mascaras debe coincidir con el numero de worker_processes
worker_cpu_affinity 0001 0010 0100 1000; 

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 32768;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing
  # your OS, and this is probably the point at where you hire people
  # who are smarter than you, as this is *a lot* of requests.
  worker_connections 30000;
  use epoll;
}

# Default error log file (this is only used when you don't override error_log on a server{} level)
pid        /var/run/im-nginx.pid;

http {
  # Hide nginx version information.
  server_tokens off;
  more_set_headers 'RSZ-Server: 01';

  # Define the mime types for files.
  include       components/mime.types;
  default_type  application/octet-stream;

  # Format for our log files
  log_format  main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  log_format  performance 
#    '$remote_addr '
#    '- $remote_user '
    '- [$time_local] '
    '- "$request" '
#    '- "$uri" '
    '- "$request_time" '
#    '- $query_string '
    '- $status '
    '- $body_bytes_sent '
#    '- $connection '
#    '- $pipe '
#    '- "$http_referer" '
#    '- "$http_user_agent" '
#    '- "$http_x_forwarded_for" '
#    '- [$http_cookie] '
#    '- $upstream_cache_status'
    ;



  log_format  upstream  
    '$remote_addr '
    '- $remote_user '
    '- [$time_local] '
    '- "$request" '
    '- "$uri" '     
    '- "$request_time" '
    '- $query_string '
    '- $status '
    '- $body_bytes_sent '
    '- $connection '
    '- $pipe '
    '- "$http_referer" '
    '- "$http_user_agent" '
    '- "$http_x_forwarded_for" '
    '- [$http_cookie] '
    '- $upstream_cache_status';


  # Default log file (this is only used when you don't override access_log on a server{} level)
  access_log off; #logs/access.log main;

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 75)
  keepalive_timeout 10 5;

  # (Default: 100)
  #keepalive_requests  100;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;

  # Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
  # collates several smaller packets together into one larger packet, thus saving
  # bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
  tcp_nodelay     off;

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  # gzip_static on;

  # Protect against the BEAST attack by preferring RC4-SHA when using SSLv3 and TLS protocols.
  # Note that TLSv1.1 and TLSv1.2 are immune to the beast attack but only work with OpenSSL v1.0.1 and higher and has limited client support.
  #ssl_protocols              SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  #ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
  #ssl_prefer_server_ciphers  on;

  # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
  # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
  # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
  # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
  #ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
  #ssl_session_timeout  10m;

  # This default SSL certificate will be served whenever the client lacks support for SNI (Server Name Indication).
  # Make it a symlink to the most important certificate you have, so that users of IE 8 and below on WinXP can see your main site without SSL errors.
  #ssl_certificate      default_ssl.crt;
  #ssl_certificate_key  default_ssl.key;

  client_body_buffer_size 5M;


  # COMPONENTS

  # Identifies bad user agents such as website downloaders and email harvesters.
  # To block them, you must also include conf/block-bad-guys.conf in your actual server{} block.
  #include components/http-identify-bad-guys.conf;
 
  # Blocks requests that lack the Host header or that specify an invalid Host.
  #include conf/http-block-invalid-host.conf;

  # Load all sites that we are hosting.
  
  # Lua libraries
  lua_package_path ";;$prefix/lua/?.lua;";

  init_by_lua '
      Image = require "imagemagick.magick.init"
  ';

  server {
    listen 204.228.236.13:7001; # for Linux # WEB01

    root /mnt/data01/eluniversal/euroot/;

    access_log  logs/ImageMagick.log upstream;
    access_log  logs/ImageMagick-perf.log performance gzip flush=5m;

    error_log  logs/im-error.log debug;

    add_header Cache-Control public;
    expires max;

    #Solo acepta imagenes
    location / {
     return 444; 
    }

    location ~* "/(?P<width>[0-9]{1,4})/(?P<heigth>[0-9]{1,4})/(?P<quality>[0-9]{1,3})/(?P<image_uri>.+\.(jpg|gif|png))" {
      lua_code_cache on;

      content_by_lua_file lua/imagemagick/ImageMagick.lua;

      add_header last-updated $time_local;
    }

  }

   server {
      listen 127.0.0.1:3333;
      server_name localhost;
      location /nginx_status {
              stub_status on;
              access_log   off;
              allow 127.0.0.1;
              deny all;
      }
  }

}
